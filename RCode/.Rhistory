test.getuni[[1]]
test.getuni[[2]]
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax =100 ))
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax =100 )
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax =1 )
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax[[1]] =100)
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax =list(100))
uniKmax =list(100)
uniKmax
uniKmax[[1]]
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax =list(rep(100, CGHo@nblevels)))
class(test.getuni)
test.getuni
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax =list(Y=100))
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax =list(Y=length(traj.cgh$Y)/10))
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax =list(Y=length(traj.cgh@Y)/10))
length(traj.cgh@Y)
traj.cgh@Y
traj.cgh@Y$Y
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo, uniKmax =list(Y=length(traj.cgh@Y$Y)/10))
length(traj.cgh@Y$Y)/10)
length(traj.cgh@Y$Y)/10
test.uniseg <- uniseg(.Object=traj.cgh, CGHo=CGHo)
test.getseq <- getsegprofiles(test.uniseg)
par(mfrow=c(1,1))
plot(traj.ex[[1]]$speed)
lines(1:length(seg.speed),test.getseq, type="s", col=2)
calling(CGHo)=TRUE ## no classification
CGHo@nblevels=3 ## number of different "states"
CGHo@alpha =0.8
seg.speed <- uniseg(.Object=traj.cgh, CGHo=CGHo)
CGHo@alpha =0.5
seg.speed <- uniseg(.Object=traj.cgh, CGHo=CGHo)
seg.speed.profile <- getsegprofiles(seg.speed)
plot(traj.ex[[1]]$speed)
lines(1:length(seg.speed.profile),seg.speed.profile, type="s", col=2)
seg.speed
CGHo@nblevels=2 ## number of different "states"
CGHo@alpha =0.5
seg.speed <- uniseg(.Object=traj.cgh, CGHo=CGHo)
seg.speed.profile <- getsegprofiles(seg.speed)
plot(traj.ex[[1]]$speed)
lines(1:length(seg.speed.profile),seg.speed.profile, type="s", col=2)
traj.cgh           = new("CGHdata",Y=traj.ex[[1]]$speed[!is.na(traj.ex[[1]]$speed)])
CGHo <- new("CGHoptions")
calling(CGHo)=FALSE ## no classification
seg.speed <- uniseg(.Object=traj.cgh, CGHo=CGHo)
seg.speed.profile <- getsegprofiles(seg.speed)
plot(traj.ex[[1]]$speed)
lines(1:length(seg.speed.profile),seg.speed.profile, type="s", col=2)
change.point <- round(cumsum(rexp(N, mu=5)))
N <- 100
change.point <- round(cumsum(rexp(N, mu=5)))
change.point <- round(cumsum(rexp(N, rate = 5)))
change.point <- change.point[which(change.point<N)]
change.point
change.point <- round(cumsum(rexp(N, rate = 5)))
change.point
rexp(N, rate = 5)
change.point <- round(cumsum(rexp(N, rate = 0.2)))
change.point
change.point <- change.point[which(change.point<N)]
change.point
change.point <- round(cumsum(rexp(N, rate = 0.1)))
change.point <- change.point[which(change.point<N)]
change.point
change.point <- round(cumsum(rexp(N, rate = 0.1)))
change.point <- change.point[which(change.point<N)]
change.point
Nchange <- length(change.point)
mu <-rnorm(Nchange, mu=5, sd=2)
Nchange <- length(change.point)
mu <-rnorm(Nchange, mu=5, sd=2)
mu <-rnorm(Nchange, mean=5, sd=2)
sigma <- 1/rgamma(Nchange, shape = 1,rate = 1)                                  })
mu <-rnorm(Nchange, mean=5, sd=2)
sigma <- 1/rgamma(Nchange, shape = 1,rate = 1)                                  })
mu <-rnorm(Nchange, mean=5, sd=2)
sigma <- 1/rgamma(Nchange, shape = 1,rate = 1)
d=1
d>=(1:N)
l1 <- lapply(c(1,change.point), function(d){
return( 1*(d>=(1:N) ))}
)
do.call("+", l1)
?reduce
?Reduce
Reduce("+", l1)
l1
l1 <- lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))})
l1
Reduce("+", l1)
Nchange
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange, mean=5, sd=2)
sigma <- 1/rgamma(Nchange, shape = 1,rate = 1)
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange, mean=5, sd=2)
sigma <- 1/rgamma(Nchange, shape = 1,rate = 1)
signal rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
mu
sd
sigma
sigma[l1]
l1
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 1,rate = 1)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
sigma <- 1/rgamma(Nchange+1, shape = 2,rate = 2)
sigma
sigma <- 1/rgamma(Nchange+1, shape = 2,rate = 4)
sigma
rgamma(Nchange+1, shape = 2,rate = 4)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
sigma
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
l1
N <- 100
change.point <- round(cumsum(rexp(N, rate = 0.1)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.1)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.1)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.1)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
set.seed(1)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
set.seed(2)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
set.seed(3)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
set.seed(4)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
set.seed(5)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
# Segmentation lecture ----------------------------------------------------
set.seed(6)
N <- 200
change.point <- round(cumsum(rexp(N, rate = 0.05)))
change.point <- change.point[which(change.point<N)]
## state sequence
l1 <- Reduce("+", lapply(c(1,change.point), function(d){
return( 1*(d<=(1:N) ))}))
Nchange <- length(change.point)
mu <-rnorm(Nchange+1, mean=5, sd=2)
sigma <- 1/rgamma(Nchange+1, shape = 20,rate = 10)
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
plot(signal)
l1
Profil.seg <- signal
save("Profile.seg", file="dataSegmentation.Rd")
signal <- rnorm(N, mean=mu[l1], sd=sigma[l1])
Profil.seg <- signal
l1
save("Profile.seg", file="dataSegmentation.Rd")
save("Profil.seg", file="dataSegmentation.Rd")
load('dataSegmentation.Rd')
plot(Profil.seg)
plot(signal)
signal.cgh           = new("CGHdata",Y=signal)
CGHo <- new("CGHoptions")
calling(CGHo)=FALSE ## no classification
signal.cgh           = new("CGHdata",Y=signal)
CGHo <- new("CGHoptions")
calling(CGHo)=FALSE ## no classification
seg.signal <- uniseg(.Object=signal.cgh, CGHo=CGHo)
seg.signal.profile <- getsegprofiles(seg.signal)
plot(signal)
lines(1:length(seg.signal.profile),seg.signal.profile, type="s", col=2)
pdf("sgmentedSignal.pdf")
plot(signal)
lines(1:length(seg.signal.profile),seg.signal.profile, type="s", col=2)
dev.off()
pdf("rawSignal.pdf")
plot(signal)
dev.off()
pdf("segmentedSignal.pdf")
plot(signal)
lines(1:length(seg.signal.profile),seg.signal.profile, type="s", col=2, lwd=2)
dev.off()
plot(signal)
lines(1:length(seg.signal.profile),seg.signal.profile, type="s", col=2, lwd=2)
library('spatstat')
Lambda.esp <- c(0.01, 0.05, 0.01, 0.02)
pp <- lapply(Lambda.esp,
)
install.packages('spatstat')
library('spatstat')
Lambda.esp <- c(0.01, 0.05, 0.01, 0.02)
pp <- lapply(Lambda.esp,
function(lambda){ rpoispp(lambda=lambda,win=c(-20,20,0,100))})
myData <- Reduce("rbind",lapply(pp, function(d) {as.data.frame(d)}) )
myData$Esp <- unlist(lapply(1:length(Lambda.esp), function(i) {rep(i, pp[[i]]$n)} ))
plot(myData$x, myData$y, col=myData$Esp, pch=19)
abline(v=0, lwd=3)
myData$DLayon<- abs(myData$x)
Trait1 <- c(1, 2, 3, 4)
Trait2 <- c(1, 2, 3, 4)
Trait3 <- c(1, 2, 3, 4)
### Attribuer à chaque espèce leurs traits
myData$Trait1 <- unlist(lapply(1:length(Lambda.esp), function(i) {rep(Trait1[i], pp[[i]]$n)}))
myData$Trait2 <-unlist(lapply(1:length(Lambda.esp), function(i) {rep(Trait2[i], pp[[i]]$n)}))
myData$Trait3 <-unlist(lapply(1:length(Lambda.esp), function(i) {rep(Trait3[i], pp[[i]]$n)}))
### Définition des paramètres
mu<-1.5
alpha<-0.2
### truncation: distance considérée maximum d'observation
trunc<-20
### Function Half-Normal
HalfNormalFct<-function (x) {(exp(-(x^2)/(2*exp(mu+
alpha*myData$Trait1[i])^2)))/(exp(-(0^2)/(2*exp(mu + alpha*myData$Trait1[i])^2)))}
### Plot de la fonction sur les 20 mètres de chaque coté du layon
curve(HalfNormalFct,from = 0,to=20)
library('spatstat')
Lambda.esp <- c(0.01, 0.05, 0.01, 0.02)
pp <- lapply(Lambda.esp,
function(lambda){ rpoispp(lambda=lambda,win=c(-20,20,0,100))})
myData <- Reduce("rbind",lapply(pp, function(d) {as.data.frame(d)}) )
myData$Esp <- unlist(lapply(1:length(Lambda.esp), function(i) {rep(i, pp[[i]]$n)} ))
plot(myData$x, myData$y, col=myData$Esp, pch=19)
abline(v=0, lwd=3)
myData$DLayon<- abs(myData$x)
Trait1 <- c(1, 2, 3, 4)
Trait2 <- c(1, 2, 3, 4)
Trait3 <- c(1, 2, 3, 4)
### Attribuer à chaque espèce leurs traits
myData$Trait1 <- unlist(lapply(1:length(Lambda.esp), function(i) {rep(Trait1[i], pp[[i]]$n)}))
myData$Trait2 <-unlist(lapply(1:length(Lambda.esp), function(i) {rep(Trait2[i], pp[[i]]$n)}))
myData$Trait3 <-unlist(lapply(1:length(Lambda.esp), function(i) {rep(Trait3[i], pp[[i]]$n)}))
### Définition des paramètres
mu<-1.5
alpha<-0.2
### truncation: distance considérée maximum d'observation
trunc<-20
### Function Half-Normal
HalfNormalFct<-function (x) {(exp(-(x^2)/(2*exp(mu+
alpha*myData$Trait1[i])^2)))/(exp(-(0^2)/(2*exp(mu + alpha*myData$Trait1[i])^2)))}
### Plot de la fonction sur les 20 mètres de chaque coté du layon
curve(HalfNormalFct,from = 0,to=20)
myData$ProbaDetect<-sapply(1:length(myData$Trait1),function (i) {
(exp(-(myData$DLayon[i]^2)/(2*exp(mu+alpha*myData$Trait1[i])^2)))
#
})
### création des détections à partir des proba (fonction de la distance de l'individu)
myData$Detect<-sapply(myData$ProbaDetect,function(i) {rbinom(1, 1,i)})
myData
### somme des détections par espèces
vNbDetect<-sapply(unstack(myData,Detect~Esp),sum)
### Probabilités à partir des "observations": Nb d'individus détectés/Nb réel d'individus
vProbDetectObs<-sapply(1:length(Lambda.esp), function(i) {vNbDetect[i]/pp[[i]]$n})
vProbDetectObs
### Probabilités de détection de l'espèce à partir de la fonction de détection
vProbDetectFit<-sapply(1:length(Trait1),function (i) {integrate(
function(x) {(exp(-(x^2)/(2*exp(mu + alpha*Trait1[i])^2)))/(exp(-(0^2)/(2*exp(mu + alpha*Trait1[i])^2)))}
, lower=0, upper=trunc)$value/trunc
}
)
vProbDetectFit
i=1
### Function Half-Normal
HalfNormalFct<-function (x) {(exp(-(x^2)/(2*exp(mu+
alpha*myData$Trait1[i])^2)))/(exp(-(0^2)/(2*exp(mu + alpha*myData$Trait1[i])^2)))}
### Plot de la fonction sur les 20 mètres de chaque coté du layon
curve(HalfNormalFct,from = 0,to=20)
vNbDetect<-sapply(unstack(myData,Detect~Esp),sum)
vNbDetect
vProbDetectObs<-sapply(1:length(Lambda.esp), function(i) {vNbDetect[i]/pp[[i]]$n})
vProbDetectObs
### Probabilités de détection de l'espèce à partir de la fonction de détection
vProbDetectFit<-sapply(1:length(Trait1),function (i) {integrate(
function(x) {(exp(-(x^2)/(2*exp(mu + alpha*Trait1[i])^2)))/(exp(-(0^2)/(2*exp(mu + alpha*Trait1[i])^2)))}
, lower=0, upper=trunc)$value/trunc
}
)
vProbDetectFit
install.packages('highlight')
library('highlight')
?highlight
library('knitr')
install.packages('tidy')
rm(list=ls())
load("RCode/dataSegmentation.Rd")
getwd()
load("dataSegmentation.Rd")
summary(Profil.seg)
plot(Profil.seg)
signalCGH    <- new("CGHdata",Y=Profil.seg)
CGHo         <- new("CGHoptions")
calling(CGHo)<- FALSE ## no classification
segSignal   <- uniseg(.Object=signal.cgh,
CGHo=CGHo)
segSignal   <- uniseg(.Object=signalCGH,
CGHo=CGHo)
segSignalProf <- getsegprofiles(segSignal)
plot(Profil.seg)
lines(1:length(segSignalProf),
segSignalProf, type="s", col=2, lwd=2)
choose(n = 10, K=2)
choose(n = 10, k = 2)
choose(n = 50, k = 4)
choose(n = 100, k = 5)
choose(n = 200, k = 6)
print(choose(n = 200, k = 6))
round(choose(n = 200, k = 6)/1e6)*1e6
<<echo=c(1,2)>>=
N <- 200
K=10
round(choose(n=N, k=K)/1e6)*1e6
@
<<echo=c(1,2)>>=
N <- 200
K=10
round(choose(n=N, k=K)/1e6)*1e6
getwd()
source('~/EnCours/2015-SA-MovementEcology/LectureSegmentation-RIllustration.R', echo=TRUE)
source('~/EnCours/2015-SA-MovementEcology/LectureSegmentation-RIllustration.R', echo=TRUE)
